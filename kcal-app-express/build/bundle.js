(()=>{var e={119:(e,o)=>{o.settings={logLevel:"debug"}},724:(e,o,t)=>{const r=t(177),n=t(302);e.exports={getAllFoods:function(e,o){o.all(n.SELECT_ALL_FOODS,((o,t)=>{if(o)return r.error(`Failed to select foods from food table. ${o}`),void e.status(500).send(o);e.send(t)}))},addNewFood:function(e,o,t){o.run(n.INSERT_FOOD(t.foodName,t.kcal,t.fat,t.saturatedFat,t.carbs,t.sugar,t.fiber,t.protein),(o=>{if(o)return r.error(`Faield to insert new food. ${o}`),void e.status(500).send(o);e.send()}))},deleteFood:function(e,o,t){o.run(n.DELETE_FOOD(t),(o=>{if(o)return r.error(`Failed to delete food. ${o}`),void e.status(500).send(o);e.send()}))}}},492:(e,o,t)=>{const r=t(177),n=t(302);function s(e){r.info("Insert initial data into the database"),e.run(n.INSERT_INITIAL_DATA,(e=>{e&&r.error(`Failed to insert initial data! ${e}`)}))}e.exports={createFoodTable:function(e){e.run(n.CREATE_TABLE_FOOD,(o=>{o?r.error(`Failed to create food table. ${o}`):function(e,o){e.all(n.COUNT_FOOD,((t,n)=>{t?r.error(`Failed to count foods in food table. ${t}`):0===n[0].cnt&&(r.info("Food table is empty!"),o(e))}))}(e,s)}))}}},302:e=>{e.exports={CREATE_TABLE_FOOD:"\n    CREATE TABLE IF NOT EXISTS food (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        foodName VARCHAR(255) NOT NULL,\n        kcal INTEGER NOT NULL,\n        fat REAL NOT NULL,\n        saturatedFat REAL NOT NULL,\n        carbs REAL NOT NULL,\n        sugar REAL NOT NULL,\n        fiber REAL NOT NULL,\n        protein REAL NOT NULL\n    )\n",COUNT_FOOD:"SELECT COUNT(*) as cnt FROM food",SELECT_ALL_FOODS:"SELECT * FROM food",INSERT_INITIAL_DATA:"\n    INSERT INTO food (foodName, kcal, fat, saturatedFat, carbs, sugar, fiber, protein)\n    VALUES ('Coocked Broccoli', 35, 4, 0, 7.2, 1.4, 3.3, 2.4),\n           ('Lemon Chicker', 226, 11.8, 1.9, 19.1, 8.7, 1.1, 10.8),\n           ('Corn', 106, 2.1, 1.1, 21.9, 0, 0, 3.1),\n           ('Sushi Salmon', 180, 8.1, 1.8, 13, 2, 0, 13)\n",INSERT_FOOD:(e,o,t,r,n,s,a,d)=>`\n    INSERT INTO food (foodName, kcal, fat, saturatedFat, carbs, sugar, fiber, protein)\n    VALUES ('${e}', ${o}, ${t}, ${r}, ${n}, ${s}, ${a}, ${d})\n`,DELETE_FOOD:e=>`\n    DELETE FROM food\n    WHERE id = ${e}\n`}},722:e=>{e.exports={withSlash:function(e){return`${"/"===e.charAt(0)?"":"/"}${e}`}}},655:e=>{e.exports={validateNewFood:function(e,o,t){const r=["foodName","kcal","fat","saturatedFat","carbs","sugar","fiber","protein"],n=["string","number","number","number","number","number","number","number"],s=Object.keys(e),a=r.filter((e=>!s.includes(e)));a.length&&t(`Some reqired props are missing: ${a}`);const d=r.filter((o=>!e[o]));d.length&&t(`Some reqired props are empty: ${d}`);const i=r.filter(((o,t)=>typeof e[o]!==n[t]));i.length&&t(`Some props have incorrect type: ${i}`),o()}}},177:(e,o,t)=>{const r=t(773),n=t(119),s={debug:"blue",info:"green",warn:"yellow",error:"red"},a=r.format.combine(r.format.cli({colors:s}),r.format.timestamp({format:"YYYY-MM-DD - hh:mm:ss - SSS"}),r.format.align(),r.format.printf((e=>`${e.timestamp} ${e.level}: ${e.message}`))),d=r.createLogger({level:n.settings.logLevel,format:a,transports:[new r.transports.Console]});r.addColors(s);const i=d.log;d.log=(e,o)=>{"[object Error]"===Object.prototype.toString.call(o)?i.call(d,e,o.toString()):i.call(d,e,o)},e.exports=d},582:e=>{"use strict";e.exports=require("cors")},860:e=>{"use strict";e.exports=require("express")},661:e=>{"use strict";e.exports=require("sqlite3")},773:e=>{"use strict";e.exports=require("winston")}},o={};function t(r){var n=o[r];if(void 0!==n)return n.exports;var s=o[r]={exports:{}};return e[r](s,s.exports,t),s.exports}(()=>{const e=t(860),o=t(661),r=t(582),n=t(177),{withSlash:s}=t(722),{validateNewFood:a}=t(655),{createFoodTable:d}=t(492),{getAllFoods:i,addNewFood:l,deleteFood:u}=t(724),f=e(),c=process.env.PORT||8080,E=s(process.env.BASE_PATH||"kcal-app"),p=new o.Database(process.env.DB||"db/food.db");f.use(r()),f.use(e.urlencoded({extended:!0})),f.use(e.json()),f.listen(c,(()=>{n.info(`KCal app server is up. Listens on port: '${c}' base path: '${E}'.`),d(p)})),f.get(`${E}/food`,((e,o)=>{n.debug(`GET ${e.url}`),i(o,p)})),f.post(`${E}/food`,((e,o)=>{n.debug(`POST ${e.url} ${e.body}`),a(e.body,(()=>l(o,p,e.body)),(e=>{n.info({message:e}),o.status(400).send(e)}))})),f.delete(`${E}/food/:id`,((e,o)=>{n.debug(`DELETE ${e.url}`),u(o,p,e.params.id)}))})()})();